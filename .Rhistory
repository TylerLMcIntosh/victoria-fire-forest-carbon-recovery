niwotAOP <- st_read("data/NIWOT_AOP_Flightbox.shp")
# Derive fire boundaries from BAECV data
#Tyler McIntosh
#3/9/23
#This script uses the following naming conventions wherever possible:
# lowerCamelCase for variables
# period.separated for functions
# underscore_separated for files
######Libraries
library(terra)
library(sf)
library(here)
library(tidyverse)
#####Clean workspace
rm(list=ls()) #Ensure empty workspace
here() #Check here location
#OR
#setwd() #Set working directory directly
options(digits = 2) #Set standard decimal print output
options(scipen = 999) #Turn scientific notation on and off (0 = on, 999 = off)
#####Load data
niwotAOP <- st_read("data/NIWOT_AOP_Flightbox.shp")
?untar
untar("data/BAECV_2000_v1.1_20170908.tar.gz")
untar("data/BAECV_2000_v1.1_20170908.tar.gz", exdir = "data/baecv2000v1.1")
burnClass2000 <- rast("data/baecv2000v1.1/BAECV_bc_2000_v1.1_20170908.tif")
plot(burnClass2000)
crs(burnClass2000)
?st_buffer
niwotBuffer <- niwotAOP %>% st_buffer(200000)
plot(niwotBuffer)
niwotBuffer <- niwotAOP$geometry %>% st_buffer(200000)
plot(niwotBuffer)
crs(niwotBuffer)
niwotBuffer <- niwotAOP %>% st_buffer(200000)
crs(niwotBuffer)
#Function to clip and mask
clipmask.raster.to.vector <- function(raster, vector, setCRS) {
if (crs(vector) != setCRS) {
print("Projecting vector")
vector <- st_transform(vector, setCRS)
print("Vector projected")
} else {
print("Vector already in chosen CRS")
}
if (crs(raster) != setCRS) {
print("Projecting raster")
raster <- project(raster, setCRS)
print("Raster projected")
} else {
print("Raster already in chosen CRS")
}
if(ext(raster) != ext(vector)) {
print("Cropping raster to vector")
raster <- crop(raster, ext(vector))
print("Cropped")
} else {
print("Extents already match")
}
print("Masking raster to vector")
rMask <- mask(raster, vector)
print("Masked")
print("Done")
return(rMask)
}
#Run function on data
baecvNiwotRegion <- clipmask.raster.to.vector(burnClass2000, niwotBuffer, projectCRS)
projectCRS <- 'EPSG:26913' #Southern rockies NAD83 13N
baecvNiwotRegion <- clipmask.raster.to.vector(burnClass2000, niwotBuffer, projectCRS)
crs(burnClass2000)
tempcrs <- crs(burnClass2000)
baecvNiwotRegion <- clipmask.raster.to.vector(burnClass2000, niwotBuffer, tempcrs)
plot(baecvNiwotRegion)
baecvNiwotRegion <- project(baecvNiwotRegion, projectCRS)
?as.polygons
baecvPoly <- as.polygons(baecvNiwotRegion, trunc=TRUE, dissolve=TRUE, values=TRUE, extent=FALSE)
plot(baecvPoly)
unique(baecvPoly$Band_1)
baecvPoly <- baecvPoly %>% filter(Band_1 == 1)
library(tidyverse)
baecvPoly <- baecvPoly %>% filter(Band_1 == 1)
baecvPoly <- baecvPoly %>% sf::st_as_sf() %>% filter(Band_1 == 1)
plot(baecvPoly)
library(mapview)
mapview(baecvPoly)
untar("../../data_raw/BAECV/BAECV_1999_v1.1_20170908.tar.gz, exdir = "data/baecv1999v1.1)
untar("../../data_raw/BAECV/BAECV_1999_v1.1_20170908.tar.gz", exdir = "data/baecv1999v1.1")
untar("../../data_raw/BAECV/BAECV_2001_v1.1_20170908.tar.gz", exdir = "data/baecv2001v1.1")
baecvPoly <- baecvPoly %>% mutate(BurnYear = 2000)
mapview(baecvPoly)
burnClass1999 <- terra::rast("data/baecv1999v1.1/BAECV_bc_2000_v1.1_20170908.tif")
burnClass2001 <- terra::rast("data/baecv2001v1.1/BAECV_bc_2000_v1.1_20170908.tif")
vectorize.clean <- function(raster, year) {
#Vectorize before reprojecting to save compute time
rasterPoly <- terra::as.polygons(raster, trunc=TRUE, dissolve=TRUE, values=TRUE, extent=FALSE)
unique(rasterPoly$Band_1) #We have values of 0 and 1 in our polygon set
#Convert back to sf & filter polygons
rasterPoly <- rasterPoly %>%
sf::st_as_sf() %>%
filter(Band_1 == 1)
#Add burn year
rasterPoly <- rasterPoly %>% mutate(BurnYear = year)
return(rasterPoly)
}
poly2000 <- vectorize.clean(baecvNiwotRegion, 2000)
mapview(poly2000)
baecv1999clip <- clipmask.raster.to.vector(burnClass1999, niwotBuffer, tempcrs)
burnClass1999 <- terra::rast("data/baecv1999v1.1/BAECV_bc_2000_v1.1_20170908.tif")
burnClass1999 <- terra::rast("data/baecv1999v1.1/BAECV_bc_1999_v1.1_20170908.tif")
burnClass2001 <- terra::rast("data/baecv2001v1.1/BAECV_bc_2001_v1.1_20170908.tif")
baecv1999clip <- clipmask.raster.to.vector(burnClass1999, niwotBuffer, tempcrs)
baecv2001clip <- clipmask.raster.to.vector(burnClass2001, niwotBuffer, tempcrs)
poly1999 <- vectorize.clean(baecv1999clip, 1999)
poly2001 <- vectorize.clean(baecv2001clip, 2001)
?st_merge
?st_combine
baecvPoly <- st_combine(poly1999,poly2000, poly2001)
baecvPoly <- st_combine(poly1999,poly2000)
baecvPoly <- st_combine(poly1999,poly2000)
baecvPoly <- rbind(poly1999,poly2000,poly2001)
mapview(baecvPoly)
View(baecvPoly)
#Function to vectorize, clean, add year
vectorize.clean <- function(raster, year) {
#Vectorize before reprojecting to save compute time
rasterPoly <- terra::as.polygons(raster, trunc=TRUE, dissolve=TRUE, values=TRUE, extent=FALSE)
unique(rasterPoly$Band_1) #We have values of 0 and 1 in our polygon set
#Convert back to sf & filter polygons
rasterPoly <- rasterPoly %>%
sf::st_as_sf() %>%
filter(Band_1 == 1)
#Add burn year and cast to polygon instead of multi-polygon
rasterPoly <- rasterPoly %>%
mutate(BurnYear = year) %>%
st_cast("POLYGON")
return(rasterPoly)
}
#Run on all 3 years
poly1999 <- vectorize.clean(baecv1999clip, 1999)
poly2000 <- vectorize.clean(baecv2000clip, 2000)
baecv2000clip <- clipmask.raster.to.vector(burnClass2000, niwotBuffer, tempcrs)
mapview(poly1999)
poly2000 <- vectorize.clean(baecv2000clip, 2000)
poly2001 <- vectorize.clean(baecv2001clip, 2001)
baecvPoly <- rbind(poly1999,poly2000,poly2001)
mapview(baecvPoly)
test <- nrow(poly1999)
test <- length(poly1999)
test <- seq(1:nrow(poly1999))
test <- as.character(seq(1:nrow(poly1999)))
test <- paste("baecv1999", "as.character(seq(1:nrow(poly1999)))", sep="")
test <- paste("baecv1999", as.character(seq(1:nrow(poly1999))), sep="")
test <- paste("baecv1999", as.character(seq(1:nrow(poly1999))), sep="_")
nms <- paste("baecv1999", as.character(seq(1:nrow(poly1999))), sep="_")
test <- poly1999 %>% cbind(nms)
mapview(test)
test <- poly1999 %>% cbind(nms) %>% rename(fireID = nms)
mapview(test)
#Function to vectorize, clean, add year
vectorize.clean <- function(raster, year) {
#Vectorize before reprojecting to save compute time
rasterPoly <- terra::as.polygons(raster, trunc=TRUE, dissolve=TRUE, values=TRUE, extent=FALSE)
unique(rasterPoly$Band_1) #We have values of 0 and 1 in our polygon set
#Convert back to sf & filter polygons
rasterPoly <- rasterPoly %>%
sf::st_as_sf() %>%
filter(Band_1 == 1)
#Add burn year and cast to polygon instead of multi-polygon
rasterPoly <- rasterPoly %>%
mutate(burnYear = year) %>%
st_cast("POLYGON")
#Add unique polygon identifier and fix attribute names
nms <- paste("baecv", as.character(year), as.character(seq(1:nrow(rasterPoly))), sep="_")
rasterPoly <- rasterpoly %>%
cbind(nms) %>%
rename(fireID = nms, burned = Band_1)
return(rasterPoly)
}
#Run on all 3 years
poly1999 <- vectorize.clean(baecv1999clip, 1999)
#Function to vectorize, clean, add year
vectorize.clean <- function(raster, year) {
#Vectorize before reprojecting to save compute time
rasterPoly <- terra::as.polygons(raster, trunc=TRUE, dissolve=TRUE, values=TRUE, extent=FALSE)
unique(rasterPoly$Band_1) #We have values of 0 and 1 in our polygon set
#Convert back to sf & filter polygons
rasterPoly <- rasterPoly %>%
sf::st_as_sf() %>%
filter(Band_1 == 1)
#Add burn year and cast to polygon instead of multi-polygon
rasterPoly <- rasterPoly %>%
mutate(burnYear = year) %>%
st_cast("POLYGON")
#Add unique polygon identifier and fix attribute names
nms <- paste("baecv", as.character(year), as.character(seq(1:nrow(rasterPoly))), sep="_")
rasterPoly <- rasterPoly %>%
cbind(nms) %>%
rename(fireID = nms, burned = Band_1)
return(rasterPoly)
}
#Run on all 3 years
poly1999 <- vectorize.clean(baecv1999clip, 1999)
poly2000 <- vectorize.clean(baecv2000clip, 2000)
poly2001 <- vectorize.clean(baecv2001clip, 2001)
mapview(poly1999)
baecvPoly <- rbind(poly1999,poly2000,poly2001)
mapview(baecvPoly)
baecvPoly <- st_transform(baecvPoly, projectCRS)
?st_write
st_write(baecvPoly, "data/baecvPoly.shp")
#Clip MTBS to area of interest
#Tyler McIntosh
#3/9/23
#This script uses the following naming conventions wherever possible:
# lowerCamelCase for variables
# period.separated for functions
# underscore_separated for files
######Libraries
library(terra)
library(sf)
library(here)
library(tidyverse)
library(mapview)
#####Clean workspace
rm(list=ls()) #Ensure empty workspace
here() #Check here location
#OR
#setwd() #Set working directory directly
options(digits = 2) #Set standard decimal print output
options(scipen = 999) #Turn scientific notation on and off (0 = on, 999 = off)
#Set CRS
projectCRS <- 'EPSG:26913' #Southern rockies NAD83 13N
#Clip MTBS to area of interest
#Tyler McIntosh
#3/9/23
#This script uses the following naming conventions wherever possible:
# lowerCamelCase for variables
# period.separated for functions
# underscore_separated for files
######Libraries
library(terra)
library(sf)
library(here)
library(tidyverse)
library(mapview)
#####Clean workspace
rm(list=ls()) #Ensure empty workspace
here() #Check here location
#OR
#setwd() #Set working directory directly
options(digits = 2) #Set standard decimal print output
options(scipen = 999) #Turn scientific notation on and off (0 = on, 999 = off)
#Set CRS
projectCRS <- 'EPSG:26913' #Southern rockies NAD83 13N
#####Load data
niwotAOP <- st_read("data/NIWOT_AOP_Flightbox.shp")
mtbsPerims <- st_read("data/mtbs_perimeter_data/mtbs_perims_DD.shp")
#Buffer area around AOP
niwotBuffer <- niwotAOP %>% sf::st_buffer(200000) #200km buffer
?st_intersection
niwotMTBS <- mtbsPerims  %>% st_intersection(niwotBuffer)
#change crs & intersect
niwotMTBS <- mtbsPerims %>%
st_transform(projectCRS) %>%
st_intersection(niwotBuffer)
mapview(niwotMTBS)
st_write(niwotMTBS, "data/MTBS_Perims_200km_of_Niwot.shp")
baecvPoly <- st_read("data/baecvPoly.shp")
baecvPoly <- rbind(poly1999,poly2000,poly2001) %>%
mutate(dataset = "BAECV")
baecvPoly <- baecvPoly %>% mutate(dataset = "BAECV")
mapview(baecvPoly)
st_write(baecvPoly, "data/baecvPoly.shp")
st_write(baecvPoly, "data/baecvPoly.shp", append = FALSE)
# Derive fire boundaries from BAECV data
#Tyler McIntosh
#3/9/23
#This script uses the following naming conventions wherever possible:
# lowerCamelCase for variables
# period.separated for functions
# underscore_separated for files
######Libraries
library(terra)
library(sf)
library(here)
library(tidyverse)
library(mapview)
#####Clean workspace
rm(list=ls()) #Ensure empty workspace
here() #Check here location
#OR
#setwd() #Set working directory directly
options(digits = 2) #Set standard decimal print output
options(scipen = 999) #Turn scientific notation on and off (0 = on, 999 = off)
#Set CRS
projectCRS <- 'EPSG:26913' #Southern rockies NAD83 13N
mtbs <- st_read("data/MTBS_Perims_200km_of_Niwot.shp")
baecb <- st_read("data/baecvPoly.shp")
baecv <- st_read("data/baecvPoly.shp")
rm(baecb)
# Derive fire boundaries from BAECV data for a given aoi
#Tyler McIntosh
#3/9/23
#This script uses the following naming conventions wherever possible:
# lowerCamelCase for variables
# period.separated for functions
# underscore_separated for files
######Libraries
library(terra)
library(sf)
library(here)
library(tidyverse)
library(mapview)
#####Clean workspace
rm(list=ls()) #Ensure empty workspace
here() #Check here location
#OR
#setwd() #Set working directory directly
options(digits = 2) #Set standard decimal print output
options(scipen = 999) #Turn scientific notation on and off (0 = on, 999 = off)
#Set CRS
projectCRS <- 'EPSG:26913' #Southern rockies NAD83 13N
#####Load data
niwotAOP <- st_read("data/NIWOT_AOP_Flightbox.shp")
untar("../../data_raw/BAECV/BAECV_2002_v1.1_20170908.tar.gz", exdir = "data/baecv2002v1.1")
# Derive fire boundaries from BAECV data for a given aoi
#Tyler McIntosh
#3/9/23
#This script uses the following naming conventions wherever possible:
# lowerCamelCase for variables
# period.separated for functions
# underscore_separated for files
######Libraries
library(terra)
library(sf)
library(here)
library(tidyverse)
library(mapview)
#####Clean workspace
rm(list=ls()) #Ensure empty workspace
here() #Check here location
#OR
#setwd() #Set working directory directly
options(digits = 2) #Set standard decimal print output
options(scipen = 999) #Turn scientific notation on and off (0 = on, 999 = off)
#Set CRS
projectCRS <- 'EPSG:26913' #Southern rockies NAD83 13N
#####Load data
niwotAOP <- st_read("data/NIWOT_AOP_Flightbox.shp")
#Untar datasets to data if not already done
#untar("../../data_raw/BAECV/BAECV_1999_v1.1_20170908.tar.gz", exdir = "data/baecv1999v1.1")
#untar("../../data_raw/BAECV/BAECV_2000_v1.1_20170908.tar.gz", exdir = "data/baecv2000v1.1")
#untar("../../data_raw/BAECV/BAECV_2001_v1.1_20170908.tar.gz", exdir = "data/baecv2001v1.1")
#untar("../../data_raw/BAECV/BAECV_2002_v1.1_20170908.tar.gz", exdir = "data/baecv2002v1.1")
# Read in BAECV
burnClass1999 <- terra::rast("data/baecv1999v1.1/BAECV_bc_1999_v1.1_20170908.tif")
burnClass2000 <- terra::rast("data/baecv2000v1.1/BAECV_bc_2000_v1.1_20170908.tif")
burnClass2001 <- terra::rast("data/baecv2001v1.1/BAECV_bc_2001_v1.1_20170908.tif")
burnClass2002 <- terra::rast("data/baecv2002v1.1/BAECV_bc_2002_v1.1_20170908.tif")
plot(burnClass2000)
#set temp crs
tempcrs <- terra::crs(burnClass2000)
#Buffer area around AOP
aoi <- niwotAOP %>% sf::st_buffer(200000) #200km buffer
plot(aoi)
#Function to clip and mask
clipmask.raster.to.vector <- function(raster, vector, setCRS) {
if (crs(vector) != setCRS) {
print("Projecting vector")
vector <- st_transform(vector, setCRS)
print("Vector projected")
} else {
print("Vector already in chosen CRS")
}
if (crs(raster) != setCRS) {
print("Projecting raster")
raster <- project(raster, setCRS)
print("Raster projected")
} else {
print("Raster already in chosen CRS")
}
if(ext(raster) != ext(vector)) {
print("Cropping raster to vector")
raster <- crop(raster, ext(vector))
print("Cropped")
} else {
print("Extents already match")
}
print("Masking raster to vector")
rMask <- mask(raster, vector)
print("Masked")
print("Done")
return(rMask)
}
#Run function on data using CRS of the large raster
baecv1999clip <- clipmask.raster.to.vector(burnClass1999, aoi, tempcrs)
baecv2000clip <- clipmask.raster.to.vector(burnClass2000, aoi, tempcrs)
baecv2001clip <- clipmask.raster.to.vector(burnClass2001, aoi, tempcrs)
baecv2002clip <- clipmask.raster.to.vector(burnClass2002, aoi, tempcrs)
#Function to vectorize, clean, add year
vectorize.clean <- function(raster, year) {
#Vectorize before reprojecting to save compute time
rasterPoly <- terra::as.polygons(raster, trunc=TRUE, dissolve=TRUE, values=TRUE, extent=FALSE)
unique(rasterPoly$Band_1) #We have values of 0 and 1 in our polygon set
#Convert back to sf & filter polygons
rasterPoly <- rasterPoly %>%
sf::st_as_sf() %>%
filter(Band_1 == 1)
#Add burn year and cast to polygon instead of multi-polygon
rasterPoly <- rasterPoly %>%
mutate(burnYear = year) %>%
st_cast("POLYGON")
#Add unique polygon identifier and fix attribute names
nms <- paste("baecv", as.character(year), as.character(seq(1:nrow(rasterPoly))), sep="_")
rasterPoly <- rasterPoly %>%
cbind(nms) %>%
rename(fireID = nms, burned = Band_1)
return(rasterPoly)
}
#Run on all 3 years
poly1999 <- vectorize.clean(baecv1999clip, 1999)
poly2000 <- vectorize.clean(baecv2000clip, 2000)
poly2001 <- vectorize.clean(baecv2001clip, 2001)
poly2002 <- vectorize.clean(baecv2002clip, 2002)
mapview(poly1999)
#Combine shapefiles & label as baecv
baecvPoly <- rbind(poly1999, poly2000, poly2001, poly2002) %>%
mutate(dataset = "BAECV")
mapview(baecvPoly)
#Reproject to project CRS
baecvPoly <- st_transform(baecvPoly, projectCRS)
#Write to shapefile
st_write(baecvPoly, "data/baecv_poly_1999_to_2002.shp", append = FALSE)
library(tidyverse)
library(here)
library(sf)
forestFires <- sf::st_read(here("data", "derived", "lba_forestFires_test.gpkg"))
View(forestFires)
forestFiresUSFS <- forestFires %>% filter(usfs_perc >= 60)
library(mapview)
View(forestFiresUSFS)
ggplot(forestFiresUSFS) +
geom_point(ponderosa, bps_Ponderosa)
ggplot(forestFiresUSFS) +
geom_point(ponderosa, bps_Ponderosa)
ggplot(forestFiresUSFS) +
geom_point(aes(x = ponderosa, y = bps_Ponderosa))
forestFiresUSFS <- forestFiresUSFS %>% mutate(ponderosa_perc = (ponderosa / area_mtrs) * 100,
bps_ponderosa_perc = (bps_Ponderosa / area_mtrs) * 100)
ggplot(forestFiresUSFS) +
geom_point(aes(x = ponderosa_perc, y = bps_ponderosa_perc))
ggplot(forestFiresUSFS) +
geom_point(aes(x = ponderosa_perc, y = bps_ponderosa_perc, color = year))
ponderosaFiresUSFS <- forestFiresUSFS %>% filter(ponderosa_perc >= 50 | bps_ponderosa_perc >= 50)
ggplot(ponderosaFiresUSFS) +
geom_point(aes(x = year, y = area_mtrs))
ggplot(ponderosaFiresUSFS) +
geom_point(aes(x = year, y = area_hctrs))
ggplot(ponderosaFiresUSFS) +
geom_point(aes(x = year, y = area_hctrs)) +
labs(title = "Ponderosa fires")
ggplot(forestFiresUSFS) +
geom_point(aes(x = year, y = area_hctrs)) +
labs(title = "Forest  fires")
ggplot(ponderosaFiresUSFS) +
geom_point(aes(x = year, y = area_hctrs)) +
labs(title = "Ponderosa fires")
ggsave(here("figures", "Ponderosa fires"))
?ggsave
ggsave(here("figures", "Ponderosa fires.png"))
ggplot(ponderosaFiresUSFS) +
geom_point(aes(x = year, y = area_mtrs)) +
labs(title = "Ponderosa fires")
ggsave(here("figures", "Ponderosa fires_mtrs.png"))
ggplot(ponderosaFiresUSFS) +
geom_point(aes(x = year, y = area_acres)) +
labs(title = "Ponderosa fires")
ggsave(here("figures", "Ponderosa fires_acrs.png"))
mapview(ponderosaFiresUSFS)
ponderosaFiresUSFS <- forestFiresUSFS %>% filter(ponderosa_perc >= 50)
ponderosaFiresUSFS <- forestFiresUSFS %>% filter(bps_ponderosa_perc >= 50)
ponderosaFiresUSFS <- forestFiresUSFS %>% filter(ponderosa_perc >= 50 | bps_ponderosa_perc >= 50)
